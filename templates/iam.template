---
AWSTemplateFormatVersion: 2010-09-09
Description: CIS AWS Foundations Benchmark Section 1 - Identity and Access Management
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Profile Level
      Parameters:
      - ProfileLevel
    ParameterLabels:
      ProfileLevel:
        default: Profile Level
Parameters:
  ProfileLevel:
    Description: 'Level 1 controls are baseline governance controls, whereas Level
      2 controls represent redundant or stricter governance controls. See the control
      list here for guidance: https://benchmarks.cisecurity.org/en-us/?route=downloads.form.awsfoundations.110'
    Type: String
    Default: Level 2
    AllowedValues:
    - Level 1
    - Level 2
  MasterConfigRoleArn:
    Type: String
Conditions:
  GovCloudCondition:
    !Equals
    - !Ref AWS::Region
    - us-gov-west-1
  IsLevel2:
    !Equals
    - Level 2
    - !Ref ProfileLevel
Resources:
# --------------------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 1.2   Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a password (Scored)
# --------------------------------------------------------------------------------------------------------------------------------------------------------
  EvaluateMFAAllUsersLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        !GetAtt
        - FunctionForEvaluateMFAAllUsers
        - Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
  FunctionForEvaluateMFAAllUsers:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CIS-EvaluateUserMfaUsage
      Code:
        ZipFile: |
          import json
          import boto3
          APPLICABLE_RESOURCES = ['AWS::IAM::User']
          def evaluate_compliance(configuration_item):
            if configuration_item['resourceType'] not in APPLICABLE_RESOURCES:
              return 'NOT_APPLICABLE'
            user_name = configuration_item['configuration']['userName']
            client = boto3.client('iam')
            mfa = client.list_mfa_devices(UserName=user_name)
            # Only check MFA for User with passwords.
            try:
              profile = client.get_login_profile(UserName=user_name)
            except:
              return 'NOT_APPLICABLE'
            if len(mfa['MFADevices']) > 0:
              return 'COMPLIANT'
            else:
              return 'NON_COMPLIANT'
          def lambda_handler(event, context):
            invoking_event = json.loads(event['invokingEvent'])
            configuration_item = invoking_event['configurationItem']
            result_token = 'No token found.'
            if 'resultToken' in event:
              result_token = event['resultToken']
            config = boto3.client('config')
            config.put_evaluations(
              Evaluations=[
                {
                  'ComplianceResourceType':configuration_item['resourceType'],
                  'ComplianceResourceId':configuration_item['resourceId'],
                  'ComplianceType': evaluate_compliance(configuration_item),
                  'OrderingTimestamp': configuration_item['configurationItemCaptureTime']
                },
              ],
              ResultToken=result_token
            )
      Description: Evaluates whether MFA is enabled for all IAM users that have a
        password
      Handler: index.lambda_handler
      Runtime: python2.7
      Timeout: '300'
      Role: !Ref MasterConfigRoleArn
  ConfigRuleForEvaluateMFAAllUsers:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CIS-UsersMustHaveMfaEnabled
      Description: CIS 1.2 - Ensure multi-factor authentication (MFA) is enabled for
        all IAM users that have a password (Scored)
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::User
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        SourceIdentifier:
          !GetAtt
          - FunctionForEvaluateMFAAllUsers
          - Arn
    DependsOn:
    - EvaluateMFAAllUsersLambdaInvokePermission

# --------------------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 1.3   Ensure credentials unused for 90 days or greater are disabled (Scored)
# --------------------------------------------------------------------------------------------------------------------------------------------------------
  EvaluateUnusedCredentialsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - FunctionForEvaluateUnusedCredentials
    Properties:
      FunctionName:
        !GetAtt
        - FunctionForEvaluateUnusedCredentials
        - Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
  FunctionForEvaluateUnusedCredentials:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CIS-DisableUnusedCredentials
      Description: Evaluates whether users with password enabled have credentials
        unused for 90 days or greater
      Code:
        ZipFile: |
          import boto3
          import json
          import datetime
          from datetime import date
          APPLICABLE_RESOURCES = ['AWS::IAM::User']
          DEFAULT_AGE_THRESHOLD_IN_DAYS = 90
          def evaluate_compliance(configuration_item):
            if configuration_item['resourceType'] not in APPLICABLE_RESOURCES:
              return 'NOT_APPLICABLE'
            config = boto3.client('config')
            resource_information = config.get_resource_config_history(
                resourceType=configuration_item['resourceType'],
                resourceId=configuration_item['resourceId']
                )
            user_name = resource_information['configurationItems'][0]['resourceName']
            now = date(datetime.date.today().year, datetime.date.today().month, datetime.date.today().day)
            iam = boto3.client('iam')
            user = iam.get_user(UserName=user_name)
            # User has a Password but never used
            if user['User'].get('PasswordLastUsed') is None:
              try:
                login_profile = iam.get_login_profile(UserName=user_name)
              except:
                return 'NOT_APPLICABLE'
              password_create_date = login_profile['LoginProfile'].get('CreateDate')
              date_last_used=date(password_create_date.year, password_create_date.month, password_create_date.day)
            else:
              password_last_used=user['User'].get('PasswordLastUsed')
              date_last_used=date(password_last_used.year, password_last_used.month, password_last_used.day)
            age_in_days = (now - date_last_used).days
            if age_in_days > DEFAULT_AGE_THRESHOLD_IN_DAYS:
              return 'NON_COMPLIANT'
            else: return 'COMPLIANT'
          def lambda_handler(event, context):
            invoking_event = json.loads(event['invokingEvent'])
            configuration_item = invoking_event['configurationItem']
            result_token = 'No token found.'
            if 'resultToken' in event:
              result_token = event['resultToken']
            config = boto3.client('config')
            config.put_evaluations(
              Evaluations=[
                {
                  'ComplianceResourceType' : configuration_item['resourceType'],
                  'ComplianceResourceId' : configuration_item['resourceId'],
                  'ComplianceType' : evaluate_compliance(configuration_item),
                  'OrderingTimestamp' : configuration_item['configurationItemCaptureTime']
                },
              ],
              ResultToken=result_token
            )
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !Ref MasterConfigRoleArn
      Runtime: python2.7
      Timeout: 10
  ConfigRuleForEvaluateUnusedCredentials:
    Type: AWS::Config::ConfigRule
    DependsOn:
    - FunctionForEvaluateUnusedCredentials
    - EvaluateUnusedCredentialsLambdaInvokePermission
    Properties:
      ConfigRuleName: CIS-DisableUnusedCredentials
      Description: CIS 1.3 - Ensure credentials unused for 90 days or greater are
        disabled (Scored)
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::User
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        SourceIdentifier:
          !GetAtt
          - FunctionForEvaluateUnusedCredentials
          - Arn

# --------------------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 1.4   Ensure access keys are rotated every 90 days or less (Scored)
# --------------------------------------------------------------------------------------------------------------------------------------------------------
  EvaluateAccessKeysLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - FunctionForEvaluateAccessKeys
    Properties:
      FunctionName:
        !GetAtt
        - FunctionForEvaluateAccessKeys
        - Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
  FunctionForEvaluateAccessKeys:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CIS-RotateAccessKeys
      Description: Evaluates whether users have unused active access keys for 90 days
        or greater
      Code:
        ZipFile: |
          import boto3
          import json
          import datetime
          from datetime import date
          APPLICABLE_RESOURCES = ['AWS::IAM::User']
          DEFAULT_AGE_THRESHOLD_IN_DAYS = 90
          def evaluate_compliance(configuration_item):
            if configuration_item['resourceType'] not in APPLICABLE_RESOURCES:
              return 'NOT_APPLICABLE'
            config = boto3.client('config')
            resource_information = config.get_resource_config_history(
                resourceType=configuration_item['resourceType'],
                resourceId=configuration_item['resourceId']
              )
            user_name = resource_information['configurationItems'][0]['resourceName']
            now = date(datetime.date.today().year, datetime.date.today().month, datetime.date.today().day)
            iam = boto3.client('iam')
            user = iam.get_user(UserName=user_name)
            for access_key in iam.list_access_keys(UserName = user_name)['AccessKeyMetadata']:
              # evaluate active access keys
              if access_key['Status'] == 'Active':
                access_key_create_date = access_key['CreateDate']
                access_key_create_date  = date(access_key_create_date.year, access_key_create_date.month, access_key_create_date.day)
                #response = iam.get_access_key_last_used(AccessKeyId = access_key['AccessKeyId'])
                #if 'LastUsedDate' in response['AccessKeyLastUsed']:
                #  access_key_last_used_date = response['AccessKeyLastUsed']['LastUsedDate']
                #  access_key_last_used_date = date(access_key_last_used_date.year, access_key_last_used_date.month, access_key_last_used_date.day)
                age_in_days = 0
                age_in_days = (now - access_key_create_date).days
                if age_in_days > DEFAULT_AGE_THRESHOLD_IN_DAYS:
                  return 'NON_COMPLIANT'
                else: return 'COMPLIANT'
            return 'NOT_APPLICABLE'
          def lambda_handler(event, context):
            invoking_event = json.loads(event['invokingEvent'])
            configuration_item = invoking_event['configurationItem']
            result_token = 'No token found.'
            if 'resultToken' in event:
              result_token = event['resultToken']
            config = boto3.client('config')
            config.put_evaluations(
              Evaluations=[
                {
                  'ComplianceResourceType' : configuration_item['resourceType'],
                  'ComplianceResourceId' : configuration_item['resourceId'],
                  'ComplianceType' : evaluate_compliance(configuration_item),
                  'OrderingTimestamp' : configuration_item['configurationItemCaptureTime']
                },
              ],
              ResultToken=result_token
            )
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !Ref MasterConfigRoleArn
      Runtime: python2.7
      Timeout: 10
  ConfigRuleForEvaluateAccessKeys:
    Type: AWS::Config::ConfigRule
    DependsOn:
    - FunctionForEvaluateAccessKeys
    - EvaluateAccessKeysLambdaInvokePermission
    Properties:
      ConfigRuleName: CIS-RotateAccessKeys
      Description: CIS 1.4 - Ensure access keys are rotated every 90 days or less
        (Scored)
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::User
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        SourceIdentifier:
          !GetAtt
          - FunctionForEvaluateAccessKeys
          - Arn

# --------------------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 1.5   Ensure IAM password policy requires at least one uppercase letter (Scored)
# CIS AWS Foundations Benchmark - 1.6   Ensure IAM password policy require at least one lowercase letter (Scored)
# CIS AWS Foundations Benchmark - 1.7   Ensure IAM password policy require at least one symbol (Scored)
# CIS AWS Foundations Benchmark - 1.8   Ensure IAM password policy require at least one number (Scored)
# CIS AWS Foundations Benchmark - 1.9   Ensure IAM password policy requires minimum length of 14 or greater (Scored)
# CIS AWS Foundations Benchmark - 1.10  Ensure IAM password policy prevents password reuse (Scored)
# CIS AWS Foundations Benchmark - 1.11  Ensure IAM password policy expires passwords within 90 days or less (Scored)
# --------------------------------------------------------------------------------------------------------------------------------------------------------
  ConfigRuleForIamPasswordPolicy:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CIS-IamPasswordPolicyMustMeetRequirements
      Description: Evaluates whether the account password policy for IAM users meets
        the specified CIS requirements 1.5 through 1.11
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::User
      InputParameters:
        RequireUppercaseCharacters: true
        RequireLowercaseCharacters: true
        RequireSymbols: true
        RequireNumbers: true
        MinimumPasswordLength: 14
        PasswordReusePrevention: 24
        MaxPasswordAge: 90
      Source:
        Owner: AWS
        SourceIdentifier: IAM_PASSWORD_POLICY

# --------------------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 1.12  Ensure no root account access key exists (Scored)
# CIS AWS Foundations Benchmark - 1.13  Ensure  MFA is enabled for the "root" account (Scored)
# CIS AWS Foundations Benchmark - 1.14  Ensure hardware MFA is enabled for the "root" account (Scored)
# --------------------------------------------------------------------------------------------------------------------------------------------------------
  EvaluateRootAccountLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: IsLevel2
    Properties:
      FunctionName:
        !GetAtt
        - FunctionForEvaluateRootAccountRule
        - Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
  FunctionForEvaluateRootAccountRule:
    Type: AWS::Lambda::Function
    Condition: IsLevel2
    Properties:
      FunctionName: CIS-EvaluateRootAccount
      Code:
        ZipFile: |
          #==================================================================================================
          # Function: EvaluateRootAccountSecurityProperties
          # Purpose:  Evaluates the root account for security properties
          #==================================================================================================
          import json
          import boto3
          import datetime
          FIELD_ACCESS_KEY_1_ACTIVE = 8
          FIELD_ACCESS_KEY_2_ACTIVE = 13
          def lambda_handler(event, context):
            is_compliant = True
            annotation = '-'
            invoking_event = json.loads(event['invokingEvent'])
            result_token = 'No token found.'
            if 'resultToken' in event: result_token = event['resultToken']
            client = boto3.client('iam')
            # Determine whether the root account has MFA enabled.
            summary = client.get_account_summary()['SummaryMap']
            if 'AccountMFAEnabled' in summary and summary['AccountMFAEnabled'] == 1:
              is_compliant = is_compliant and True
            else:
              is_compliant = is_compliant and False
              annotation = annotation + ' The root account does NOT have MFA enabled.'
            # Determine whether the root account uses hardware-based MFA.
            mfa_devices = client.list_virtual_mfa_devices()['VirtualMFADevices']
            for mfa_device in mfa_devices:
              if 'SerialNumber' in mfa_device and 'mfa/root-account-mfa-device' in mfa_device['SerialNumber']:
                is_compliant = is_compliant and False
                annotation = annotation + ' The root account does NOT have hardware-based MFA enabled.'
                break
              else:
                is_compliant = is_compliant and True
            # Determine whether the root account has active access keys.
            # The credential report will contain comma-separated values, so transform the users into a list.
            response = client.generate_credential_report()
            content = client.get_credential_report()['Content']
            users = content.splitlines()
            # Look for the ''<root_account>'' user value and determine whether acccess keys are active.
            for user in users:
              if '<root_account>' in user:
                user_values = user.split(',')
                if user_values[FIELD_ACCESS_KEY_1_ACTIVE].lower() == 'false' and user_values[FIELD_ACCESS_KEY_2_ACTIVE].lower() == 'false':
                  is_compliant = is_compliant and True
                else:
                  is_compliant = is_compliant and False
                  annotation = annotation + ' The root account HAS active access keys associated with it.'
                break
            config = boto3.client('config')
            config.put_evaluations(
              Evaluations=[
                {
                  'ComplianceResourceType': 'AWS::Account',
                  'ComplianceResourceId': 'Root',
                  'ComplianceType': 'COMPLIANT' if is_compliant else 'NON_COMPLIANT',
                  'Annotation': annotation,
                  'OrderingTimestamp': datetime.datetime.now(),
                },
              ],
              ResultToken=result_token
            )
      Description: Evaluates the security properties of the root account - CIS 1.12,
        1.13, 1.14
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !Ref MasterConfigRoleArn
      Runtime: python2.7
      Timeout: 10
  ConfigRuleForEvaluateRootAccount:
    Type: AWS::Config::ConfigRule
    Condition: IsLevel2
    DependsOn:
    - EvaluateRootAccountLambdaInvokePermission
    Properties:
      ConfigRuleName: CIS-RootAccountMustHaveMfaEnabled
      Description: CIS 1.12 - Ensure no root account access key exists (Scored) ,
        CIS 1.13 - Ensure  MFA is enabled for the 'root' account (Scored) , CIS 1.14
        - Ensure hardware MFA is enabled for the 'root' account (Scored)
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        SourceIdentifier:
          !GetAtt
          - FunctionForEvaluateRootAccountRule
          - Arn

# --------------------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 1.16  Ensure IAM policies are attached only to groups or roles (Scored)
# --------------------------------------------------------------------------------------------------------------------------------------------------------
  EvaluateUserPolicyAssociationLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - FunctionForEvaluateUserPolicyAssociationRule
    Properties:
      FunctionName:
        !GetAtt
        - FunctionForEvaluateUserPolicyAssociationRule
        - Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
  FunctionForEvaluateUserPolicyAssociationRule:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CIS-EvaluateUserPolicyAssociations
      Description: Evaluates whether users have policies associated with them. Users
        should inherit permissions from groups instead.
      Code:
        ZipFile: |
          #==================================================================================================
          # Function: EvaluateUserPolicyAssociations
          # Purpose:  Evaluates whether users have policies associated with them. Users should inherit permissions from groups instead.
          #==================================================================================================
          import json
          import boto3
          APPLICABLE_RESOURCES = ['AWS::IAM::User']
          annotation = ''
          def evaluate_compliance(configuration_item):
            global annotation
            annotation=''
            if configuration_item['resourceType'] not in APPLICABLE_RESOURCES:
              return 'NOT_APPLICABLE'
            user_name = configuration_item['resourceName']
            iam = boto3.client('iam')
            # lists all user inline attached policies
            if iam.list_user_policies(UserName=user_name)['PolicyNames']:
              annotation = annotation + 'The user has inline policies attached! '
              return 'NON_COMPLIANT'
            # lists all user managed attached policies
            elif iam.list_attached_user_policies(UserName=user_name)['AttachedPolicies']:
              annotation=annotation + 'The user has managed policies attached! '
              return 'NON_COMPLIANT'
            else:
              annotation=annotation + 'The user does not have inline or managed policies attached! '
              return 'COMPLIANT'
          def lambda_handler(event, context):
            invoking_event = json.loads(event['invokingEvent'])
            configuration_item = invoking_event['configurationItem']
            result_token = 'No token found.'
            if 'resultToken' in event: result_token = event['resultToken']
            config = boto3.client('config')
            config.put_evaluations(
              Evaluations=[
                {
                  'ComplianceResourceType': configuration_item['resourceType'],
                  'ComplianceResourceId': configuration_item['resourceId'],
                  'ComplianceType': evaluate_compliance(configuration_item),
                  'Annotation': annotation,
                  'OrderingTimestamp': configuration_item['configurationItemCaptureTime']
                },
              ],
              ResultToken=result_token
            )
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !Ref MasterConfigRoleArn
      Runtime: python2.7
      Timeout: 10
  ConfigRuleForEvaluateUserPolicyAssociations:
    Type: AWS::Config::ConfigRule
    DependsOn:
    - FunctionForEvaluateUserPolicyAssociationRule
    - EvaluateUserPolicyAssociationLambdaInvokePermission
    Properties:
      ConfigRuleName: CIS-UsersMustNotHaveAssociatedPolicies
      Description: CIS 1.16 - Ensure IAM policies are attached only to groups or roles
        (Scored)
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::User
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        SourceIdentifier:
          !GetAtt
          - FunctionForEvaluateUserPolicyAssociationRule
          - Arn

#===================================================================================================
# CIS 1.21  Ensure IAM instance roles are used for AWS resource access from instances
#===================================================================================================
  FunctionForInstanceRoleUseRule:
    Type: AWS::Lambda::Function
    Condition: IsLevel2
    Properties:
      FunctionName: CIS-EvaluateInstanceRoleUse
      Code:
        ZipFile: |
          #==================================================================================================
          # Function: EvaluateInstanceRoleUse
          # Purpose:  Evaluates whether instances use instance roles
          #==================================================================================================
          import boto3
          import json
          def evaluate_compliance(config_item, instance_id):
            if (config_item['resourceType'] != 'AWS::EC2::Instance'): return 'NOT_APPLICABLE'
            reservations = boto3.client('ec2').describe_instances(InstanceIds=[instance_id])['Reservations']
            if (reservations[0]['Instances'][0]['State']['Name']).upper() == 'TERMINATED':
              return 'NOT_APPLICABLE'
            if reservations and 'IamInstanceProfile' in reservations[0]['Instances'][0]: return 'COMPLIANT'
            else: return 'NON_COMPLIANT'
          def lambda_handler(event, context):
            invoking_event = json.loads(event['invokingEvent'])
            compliance_value = 'NOT_APPLICABLE'
            instance_id = invoking_event['configurationItem']['resourceId']
            compliance_value = evaluate_compliance(invoking_event['configurationItem'], instance_id)
            config = boto3.client('config')
            response = config.put_evaluations(
              Evaluations=[
                {
                  'ComplianceResourceType': invoking_event['configurationItem']['resourceType'],
                  'ComplianceResourceId': instance_id,
                  'ComplianceType': compliance_value,
                  'OrderingTimestamp': invoking_event['configurationItem']['configurationItemCaptureTime']
                },
              ],
              ResultToken=event['resultToken']
            )
      Description: Evaluates whether instances use instance roles
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !Ref MasterConfigRoleArn
      Runtime: python2.7
      Timeout: 10
  ConfigPermissionToCallInstanceRoleUseLambda:
    Type: AWS::Lambda::Permission
    Condition: IsLevel2
    DependsOn: FunctionForInstanceRoleUseRule
    Properties:
      FunctionName: !GetAtt FunctionForInstanceRoleUseRule.Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
  ConfigRuleForInstanceRoleUses:
    Type: AWS::Config::ConfigRule
    Condition: IsLevel2
    DependsOn:
    - FunctionForInstanceRoleUseRule
    - ConfigPermissionToCallInstanceRoleUseLambda
    Properties:
      ConfigRuleName: CIS-InstancesMustUseIamRoles
      Description: CIS 1.21  Ensure IAM instance roles are used for AWS resource access
        from instances
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Instance
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        SourceIdentifier: !GetAtt FunctionForInstanceRoleUseRule.Arn

# --------------------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 1.22  Ensure a support role has been created to manage incidents with AWS Support (Scored)
# --------------------------------------------------------------------------------------------------------------------------------------------------------
  EvaluateAwsSupportAccessPolicyLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - FunctionForEvaluateAwsSupportAccessPolicy
    Properties:
      FunctionName:
        !GetAtt
        - FunctionForEvaluateAwsSupportAccessPolicy
        - Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
  FunctionForEvaluateAwsSupportAccessPolicy:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CIS-EvaluateSupportRoleExists
      Description: Evaluates whether users / groups / roles have the 'AWSSupportAccess'
        policy associated.
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def evaluate_compliance(resource_type):
            return_value = 'COMPLIANT'
            client = boto3.client('iam')
            partition = 'aws'
            if (os.environ['AWS_REGION'].find("-gov-") > 0):
              partition = 'aws-us-gov'
            policy_arn = 'arn:' + partition + ':iam::aws:policy/AWSSupportAccess'
            print 'policyarn = ', policy_arn
            # If GovCloud, dont evaluate as the Managed Policy 'AWSSupportAccess' doesn't exist
            if (policy_arn.find("-gov") > 0):
              return 'NOT_APPLICABLE'
            # search for all entities that have a specific policy associated: AWSSupportAccess
            response = client.list_entities_for_policy(PolicyArn=policy_arn)
            if (resource_type) == 'user' and len(response['PolicyUsers']) == 0:
              return_value = 'NOT_APPLICABLE'
            elif (resource_type) == 'group' and len(response['PolicyGroups']) == 0:
              return_value = 'NOT_APPLICABLE'
            elif (resource_type) == 'role' and len(response['PolicyRoles']) == 0:
              return_value = 'NOT_APPLICABLE'
            else:
              return_value = 'COMPLIANT'
            return return_value
          def lambda_handler(event, context):
            invoking_event = json.loads(event['invokingEvent'])
            config = boto3.client('config')
            userAnnotation = 'Atleast one IAM User has the AWSSupportAccess IAM policy assigned'
            grpAnnotation = 'Atleast one IAM Group has the AWSSupportAccess IAM policy assigned'
            roleAnnotation = 'Atleast one IAM Role has the AWSSupportAccess IAM policy assigned'
            userCompliance = evaluate_compliance('user')
            groupCompliance = evaluate_compliance('group')
            roleCompliance = evaluate_compliance('role')
            response = config.put_evaluations(
              Evaluations=[
                {
                  'ComplianceResourceType': 'AWS::IAM::User',
                  'ComplianceResourceId': 'NA',
                  'ComplianceType': userCompliance,
                  'Annotation': userAnnotation,
                  'OrderingTimestamp': invoking_event['notificationCreationTime']
                },
                {
                  'ComplianceResourceType': 'AWS::IAM::Group',
                  'ComplianceResourceId': 'NA',
                  'ComplianceType': groupCompliance,
                  'Annotation': grpAnnotation,
                  'OrderingTimestamp': invoking_event['notificationCreationTime']
                },
                {
                  'ComplianceResourceType': 'AWS::IAM::Role',
                  'ComplianceResourceId': 'NA',
                  'ComplianceType': roleCompliance,
                  'Annotation': roleAnnotation,
                  'OrderingTimestamp': invoking_event['notificationCreationTime']
                }
              ],
              ResultToken=event['resultToken']
            )
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !Ref MasterConfigRoleArn
      Runtime: python2.7
      Timeout: 10
  ConfigRuleForEvaluateAwsSupportAccessPolicy:
    Type: AWS::Config::ConfigRule
    DependsOn:
    - FunctionForEvaluateAwsSupportAccessPolicy
    - EvaluateAwsSupportAccessPolicyLambdaInvokePermission
    Properties:
      ConfigRuleName: CIS-AwsSupportRoleExists
      Description: CIS 1.22 - Ensure a support role has been created to manage incidents
        with AWS Support (Scored)
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::User
        - AWS::IAM::Group
        - AWS::IAM::Role
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        SourceIdentifier:
          !GetAtt
          - FunctionForEvaluateAwsSupportAccessPolicy
          - Arn

# --------------------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 1.24  Ensure IAM policies that allow full "*:*" administrative privileges are not created (Scored)
# --------------------------------------------------------------------------------------------------------------------------------------------------------
  EvaluateFullAdminPrivilegesPoliciesLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - FunctionForEvaluateFullAdminPrivilegesPolicies
    Properties:
      FunctionName:
        !GetAtt
        - FunctionForEvaluateFullAdminPrivilegesPolicies
        - Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
  FunctionForEvaluateFullAdminPrivilegesPolicies:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CIS-EvaluateFullAdminPolicyPermissions
      Description: Evaluates whether policies allowing full admin privileges '*:*'
        have been created
      Code:
        ZipFile: |
          import boto3
          import json
          import jmespath
          def evaluate_compliance(config_item, policy_arn):
            if (config_item['resourceType'] != 'AWS::IAM::Policy'):
              return 'NOT_APPLICABLE'
            return_value = 'COMPLIANT'
            client = boto3.client('iam')
            # Get the policy details.
            policy = client.get_policy(PolicyArn = policy_arn)['Policy']
            # Get the latest policy version.
            policy_version = client.get_policy_version(
              PolicyArn = policy['Arn'],
              VersionId = policy['DefaultVersionId']
            )
            # search for full admin privileges within the policy statements
            if jmespath.search('PolicyVersion.Document.Statement[?Effect == \'Allow\' && contains(Resource, \'*\') && contains (Action, \'*\')]', policy_version):
              return_value = 'NON_COMPLIANT'
            return return_value
          def lambda_handler(event, context):
            invoking_event = json.loads(event['invokingEvent'])
            policy_arn = invoking_event['configurationItem']['ARN']
            compliance_value = evaluate_compliance(invoking_event['configurationItem'], policy_arn)
            config = boto3.client('config')
            response = config.put_evaluations(
              Evaluations=[
                {
                  'ComplianceResourceType': invoking_event['configurationItem']['resourceType'],
                  'ComplianceResourceId': invoking_event['configurationItem']['resourceId'],
                  'ComplianceType': compliance_value,
                  'OrderingTimestamp': invoking_event['configurationItem']['configurationItemCaptureTime']
                },
              ],
              ResultToken=event['resultToken']
            )
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !Ref MasterConfigRoleArn
      Runtime: python2.7
      Timeout: 10
  ConfigRuleForEvaluateFullAdminPrivilegesPolicies:
    Type: AWS::Config::ConfigRule
    DependsOn:
    - FunctionForEvaluateFullAdminPrivilegesPolicies
    - EvaluateFullAdminPrivilegesPoliciesLambdaInvokePermission
    Properties:
      ConfigRuleName: CIS-EvaluateFullAdminPrivilegesPolicies
      Description: CIS 1.24 - Ensure IAM policies that allow full '*:*' administrative
        privileges are not created (Scored)
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::Policy
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        SourceIdentifier:
          !GetAtt
          - FunctionForEvaluateFullAdminPrivilegesPolicies
          - Arn
...