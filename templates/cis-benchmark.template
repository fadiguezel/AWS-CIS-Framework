---
AWSTemplateFormatVersion: 2010-09-09
Description: CIS AWS Foundations Benchmark - The CIS AWS Foundations Benchmark provides
  a set of security configuration best practices for AWS. (qs-1nrf3c2if)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Profile Level
      Parameters:
      - ProfileLevel
    - Label:
        default: CloudWatch Rules and Alarms Parameters
      Parameters:
      - NotificationEmailAddressForCloudWatchAlarms
    - Label:
        default: (Optional) Configure AWS Cloudtrail and AWS Config
      Parameters:
      - ConfigureCloudtrailAndConfig
    ParameterLabels:
      ProfileLevel:
        default: Profile Level
      NotificationEmailAddressForCloudWatchAlarms:
        default: Notification Address
Parameters:
  ProfileLevel:
    Description: 'Level 1 controls are baseline governance controls, whereas Level
      2 controls represent redundant or stricter governance controls. See the control
      list here for guidance: https://benchmarks.cisecurity.org/en-us/?route=downloads.form.awsfoundations.110'
    Type: String
    Default: Level 2
    AllowedValues:
    - Level 1
    - Level 2
  NotificationEmailAddressForCloudWatchAlarms:
    Type: String
    Description: Email address that will be subscribed to the SNS topic for CloudWatch
      alarms and rules (a subscription confirmation email will be sent).
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: Must be a valid email address!
  NestedStackTemplateBaseURL:
    Description: "Base URL for loading the nested stack templates"
    Type: String
  AuditIdentityAndAccessManagement:
    Type: String
    Default: 'Yes'
    AllowedValues:
    - 'Yes'
    - 'No'
  AuditLogging:
    Description: "Section 2 of the CIS Amazon Web Services Foundations Benchmark covering
      'Logging and related features'"
    Type: String
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  AuditMonitoring:
    Description: "Section 3 of the CIS Amazon Web Services Foundations Benchmark covering
      'Monitoring and related features'"
    Type: String
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  AuditNetworking:
    Description: "Section 4 of the CIS Amazon Web Services Foundations Benchmark covering
      'Networking and related features'"
    Type: String
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
Conditions:
  GovCloudCondition:
    !Equals
    - !Ref AWS::Region
    - us-gov-west-1
  IsLevel2:
    !Equals
    - Level 2
    - !Ref ProfileLevel
  RolloutIdentityAndAccessManagement:
    !Equals
    - "Yes"
    - !Ref AuditIdentityAndAccessManagement
  RolloutLogging:
    !Equals
    - "Yes"
    - !Ref AuditLogging
  RolloutMonitoring:
    !Equals
    - "Yes"
    - !Ref AuditMonitoring
  RolloutNetworking:
    !Equals
    - "Yes"
    - !Ref AuditNetworking
Resources:
#===============================================================================================================================
# Resources for EvaluateCisBenchmarkingPreconditions
#===============================================================================================================================
  MasterConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - !Sub
        - arn:${Partition}:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - Partition:
            !If
            - GovCloudCondition
            - aws-us-gov
            - aws
      - !Sub
        - arn:${Partition}:iam::aws:policy/AWSCloudTrailReadOnlyAccess
        - Partition:
            !If
            - GovCloudCondition
            - aws-us-gov
            - aws
      - !Sub
        - arn:${Partition}:iam::aws:policy/IAMReadOnlyAccess
        - Partition:
            !If
            - GovCloudCondition
            - aws-us-gov
            - aws
      - !Sub
        - arn:${Partition}:iam::aws:policy/service-role/AWSConfigRulesExecutionRole
        - Partition:
            !If
            - GovCloudCondition
            - aws-us-gov
            - aws
      - !Sub
        - arn:${Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Partition:
            !If
            - GovCloudCondition
            - aws-us-gov
            - aws
      Policies:
      - PolicyName: KmsReadOnly
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - kms:GetKeyRotationStatus
            - kms:ListKeys
            - kms:ListAliases
            Resource: '*'
      - PolicyName: S3ReadOnly
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:GetBucketAcl
            - s3:GetBucketLogging
            Resource: '*'

#==================================================================================================
# Function: EvaluateCisBenchmarkingPreconditions
# Purpose:  Evaluates preconditions for CIS benchmarking
#
#           Precondition 1: Config must have an active recorder running.
#                           This is needed for Config Rules.
#           Precondition 2: CloudTrail must be delivering logs to CloudWatch Logs
#                           This is needed for CloudWatch metrics and alarms.
#==================================================================================================
  FunctionForEvaluateCISBenchmarkPreconditions:
    Type: AWS::Lambda::Function
    DependsOn:
    - MasterConfigRole
    Properties:
      FunctionName: CIS-EvaluateCISBenchmarkPreconditions
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          def lambda_handler(event, context):
            response_status = cfnresponse.SUCCESS
            response_data = ''
            # Only execute in a custom CloudFormation resource creation event.
            if 'RequestType' in event and event['RequestType'] == 'Create':
              is_recording = False
              # Determine whether there is at least one configuration recorder recording.
              for recorder in boto3.client('config').describe_configuration_recorder_status()['ConfigurationRecordersStatus']:
                is_recording = is_recording or recorder['recording']
              if not is_recording:
                response_status = cfnresponse.FAILED
                response_data = response_data + 'There is no active Config Recorder.'
              # Determine whether any of the trails are delivering logs to CloudWatch Logs (the trail and log must be in-region)
              is_delivering_logs = False
              for trail in boto3.client('cloudtrail').describe_trails(includeShadowTrails=False)['trailList']:
                if 'CloudWatchLogsLogGroupArn' in trail:
                  is_delivering_logs = True
                  break
              if not is_delivering_logs:
                response_status = cfnresponse.FAILED
                response_data = response_data + ' CloudTrail is not delivering logs to CloudWatch Logs.'
            cfnresponse.send(event, context, response_status, {"Response":response_data}, '')
      Description: Evaluates preconditions for CIS benchmarking
      Handler: index.lambda_handler
      MemorySize: 1024
      Role:
        !GetAtt
        - MasterConfigRole
        - Arn
      Runtime: python2.7
      Timeout: 5
  ResourceForEvaluateCISBenchmarkPreconditions:
    Type: Custom::ResourceForEvaluateCISBenchmarkPreconditions
    DependsOn: FunctionForEvaluateCISBenchmarkPreconditions
    Properties:
      ServiceToken:
        !GetAtt
        - FunctionForEvaluateCISBenchmarkPreconditions
        - Arn

# --------------------------------------------------------------------------------------------------------------------------------------------------------
# Modularized Stacks for the Sections 1-4 of the benchmark
# Any reporting / alerts to end user should be via an SNS Topic - the subscriber is the provided email address
# --------------------------------------------------------------------------------------------------------------------------------------------------------
  IdentityAndAccessManagement:
    Type: AWS::CloudFormation::Stack
    DependsOn: MasterConfigRole
    Condition: RolloutIdentityAndAccessManagement
    Properties:
      TimeoutInMinutes: 20
      TemplateURL:
        !Sub ${NestedStackTemplateBaseURL}iam.template
      Parameters:
        ProfileLevel: !Ref ProfileLevel
        MasterConfigRoleArn:
          !GetAtt
          - MasterConfigRole
          - Arn
  Logging:
    Type: AWS::CloudFormation::Stack
    DependsOn: MasterConfigRole
    Condition: RolloutLogging
    Properties:
      TimeoutInMinutes: 20
      TemplateURL:
        !Sub ${NestedStackTemplateBaseURL}logging.template
      Parameters:
        ProfileLevel: !Ref ProfileLevel
        MasterConfigRoleArn:
          !GetAtt
          - MasterConfigRole
          - Arn
  Monitoring:
    Type: AWS::CloudFormation::Stack
    DependsOn: MasterConfigRole
    Condition: RolloutMonitoring
    Properties:
      TimeoutInMinutes: 20
      TemplateURL:
        !Sub ${NestedStackTemplateBaseURL}monitoring.template
      Parameters:
        ProfileLevel: !Ref ProfileLevel
        NotificationEmailAddressForCloudWatchAlarms: !Ref NotificationEmailAddressForCloudWatchAlarms
        MasterConfigRoleArn:
          !GetAtt
          - MasterConfigRole
          - Arn
  Networking:
    Type: AWS::CloudFormation::Stack
    DependsOn: MasterConfigRole
    Condition: RolloutNetworking
    Properties:
      TimeoutInMinutes: 20
      TemplateURL:
        !Sub ${NestedStackTemplateBaseURL}networking.template
      Parameters:
        ProfileLevel: !Ref ProfileLevel
        MasterConfigRoleArn:
          !GetAtt
          - MasterConfigRole
          - Arn
...
